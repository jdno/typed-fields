---
name: Rust

"on":
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  detect-changes:
    name: Detect changes
    runs-on: ubuntu-latest

    outputs:
      any_changed: ${{ steps.detect-changes.outputs.any_changed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get changed files
        id: detect-changes
        uses: tj-actions/changed-files@v41
        with:
          files: |
            .github/workflows/rust.yml
            **/*.rs
            **/*.toml

      - name: Print changed files
        run: |
          for file in ${{ steps.detect-changes.outputs.all_changed_files }}; do
            echo "$file"
          done

  doc:
    name: Build docs
    runs-on: ubuntu-latest

    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up nightly toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache build artifacts
        uses: swatinem/rust-cache@v2.7.2
        with:
          prefix-key: nightly-v1

      - name: Run Clippy
        run: cargo doc --all-features --no-deps

  features:
    name: Test features
    runs-on: ubuntu-latest

    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache build artifacts
        uses: swatinem/rust-cache@v2.7.2

      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack

      - name: Test combinations of features
        run: cargo hack --feature-powerset check --lib --tests

  lint:
    name: Lint code
    runs-on: ubuntu-latest

    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache build artifacts
        uses: swatinem/rust-cache@v2.7.2

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  minimal:
    name: Test minimal versions
    runs-on: ubuntu-latest

    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up nightly toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache build artifacts
        uses: swatinem/rust-cache@v2.7.2
        with:
          prefix-key: nightly-v1

      - name: Set minimal versions for dependencies
        run: cargo update -Z direct-minimal-versions

      - name: Run tests
        run: cargo test --all-features --all-targets --locked

  msrv:
    name: MSRV
    runs-on: ubuntu-latest

    strategy:
      matrix:
        msrv: [1.56.1]

    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.msrv }}

      - name: Cache build artifacts
        uses: swatinem/rust-cache@v2.7.2
        with:
          prefix-key: ${{ matrix.msrv }}-v1

      - name: Check code
        run: cargo +${{ matrix.msrv }} check --all-features --all-targets

  style:
    name: Check style
    runs-on: ubuntu-latest

    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Run Rustfmt
        run: cargo fmt --all -- --check

  test:
    name: Run tests
    runs-on: ubuntu-latest

    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'

    container:
      image: xd009642/tarpaulin:0.27.2-slim
      options: --security-opt seccomp=unconfined

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache build artifacts
        uses: swatinem/rust-cache@v2.7.2
        with:
          prefix-key: tarpaulin-v1

      - name: Run tests with test coverage
        run: |
          cargo tarpaulin \
            --all-features \
            --all-targets \
            --out Xml \
            --skip-clean \
            --target-dir target/tarpaulin-target/ \
            --timeout 120 \
            --verbose

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: cobertura.xml
