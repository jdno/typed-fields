VERSION 0.8

IMPORT github.com/earthly/lib/rust AS rust

COPY_RUST_SOURCES:
    FUNCTION

    # Copy the source code in a cache-friendly way
    COPY --keep-ts Cargo.toml Cargo.lock ./
    COPY --keep-ts --dir src tests ./

DEPS_LATEST:
    FUNCTION

    DO +SOURCES

    # Switch to beta toolchain
    RUN rustup default beta

    # Update the dependencies to the latest versions
    DO rust+CARGO --args="update"

    # Run tests to ensure the latest versions are compatible
    ENV RUSTFLAGS="-D deprecated"
    DO rust+CARGO --args="test --all-features --all-targets --locked"

DEPS_MINIMAL:
    FUNCTION

    DO +SOURCES

    # Switch to nightly toolchain
    RUN rustup default nightly

    # Set minimal versions for dependencies
    DO rust+CARGO --args="update -Z direct-minimal-versions"

    # Run tests to ensure the minimal versions are compatible
    DO rust+CARGO --args="test --all-features --all-targets --locked"

DOCS:
    FUNCTION

    DO +SOURCES

    # Generate the documentation
    DO rust+CARGO --args="doc --all-features --no-deps" --output="doc/.+"

    # Save the documentation to the local filesystem
    SAVE ARTIFACT target/doc AS LOCAL target/doc

FEATURES:
    FUNCTION

    DO +BUILD

    # Install cargo-hack
    DO rust+CARGO --args="install cargo-hack"

    # Test combinations of features
    DO rust+CARGO --args="hack --feature-powerset check --lib --tests"

FORMAT:
    FUNCTION

    ARG FIX="false"

    DO +SOURCES

    # Check or fix the formatting of the source code
    IF [ "$FIX" = "true" ]
        DO rust+CARGO --args="fmt --all"
    ELSE
        DO rust+CARGO --args="fmt --all --check"
    END

LINT:
    FUNCTION

    DO +BUILD

    # Check the code for linting errors
    DO rust+CARGO --args="clippy --all-targets --all-features -- -D warnings"

MSRV:
    FUNCTION

    ARG MSRV="1.71.1"

    FROM "rust:$MSRV-slim"

    # Initialize Rust
    DO rust+INIT --keep_fingerprints=true

    # Copy the source code in a cache-friendly way
    DO +COPY_RUST_SOURCES

    # Check that the project compiles with the MSRV
    DO rust+CARGO --args="+$MSRV check --all-features --all-targets"

PUBLISH:
    FUNCTION

    DO +BUILD

    # Copy additional files for the release into the container
    COPY README.md .

    # Publish the crate to crates.io
    DO rust+CARGO --secret CARGO_REGISTRY_TOKEN --args="cargo publish -v --all-features --token $CARGO_REGISTRY_TOKEN"

TEST:
    FUNCTION

    # Optionally save the report to the local filesystem
    ARG SAVE_REPORT=""

    DO +TARPAULIN_CONTAINER

    # Copy the source code in a cache-friendly way
    DO +COPY_RUST_SOURCES

    # Run the tests and measure the code coverage
    # --privileged is required by tarpaulin to set flags on the binary
    RUN --privileged cargo tarpaulin \
        --all-features \
        --all-targets \
        --out Xml \
        --skip-clean \
        --verbose

    # Save the coverage report
    IF [ "$SAVE_REPORT" != "" ]
        SAVE ARTIFACT cobertura.xml AS LOCAL cobertura.xml
    END

CONTAINER:
    FUNCTION

    FROM rust:1.84.1-slim
    WORKDIR /typed-fields

    # Initialize Rust
    DO rust+INIT --keep_fingerprints=true

    # Install clippy and rustfmt
    RUN rustup component add clippy rustfmt

TARPAULIN_CONTAINER:
    FUNCTION

    DO +CONTAINER

    # Install system-level dependencies
    RUN apt update && apt upgrade -y && apt install -y curl libssl-dev pkg-config

    # Install cargo-tarpaulin
    DO rust+CARGO --args="install cargo-tarpaulin"

    # Cache the container
    SAVE IMAGE --cache-hint

SOURCES:
    FUNCTION

    DO +CONTAINER

    # Copy the source code in a cache-friendly way
    DO +COPY_RUST_SOURCES

BUILD:
    FUNCTION

    DO +SOURCES

    # Build the project
    DO rust+CARGO --args="build --all-features --all-targets --locked"
